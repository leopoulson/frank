------ map stuff
data Map K V = mentry K V (Map K V) | mnil

lookup : {{K -> K -> Bool} -> K -> Map K V -> Maybe V}
lookup _ _ mnil = nothing
lookup eq k (mentry k' v rest) = if (eq k k') {just v} {lookup eq k rest}

lookupHard : {{K -> K -> Bool} -> K -> Map K V -> V}
-- lookupHard _ _ (mnil) = nothing
lookupHard eq k (mentry k' v rest) = if (eq k k') {v} {lookupHard eq k rest}

delete : {{K -> K -> Bool} -> K -> Map K V -> Map K V}
delete _ _ mnil = mnil
delete eq k (mentry k' v rest) = if (eq k k') {delete eq k rest} {mentry k' v (delete eq k rest)}

insert : K -> V -> Map K V -> Map K V
insert key value m = mentry key value m



-- modify : {K -> K -> Bool}    -- equality
--       -> {V -> V}            -- modifying function
--       -> K                   -- index
--       -> Map K V             -- init map
--       -> Map K V             -- resulting map
-- modify _ _ _ mnil = mnil
-- modify eq mdfy k (mentry k' v rest) = if (eq k k')
--        { mentry k' (mdfy v) (modify eq mdfy k rest) }
--        { mentry k' v        (modify eq mdfy k rest) }
------ end map stuff

eqn : {Int -> Int -> Bool}
eqn x y = x == y
