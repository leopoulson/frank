include std

include map

---------------- Helpers
snocOrInsert : {Sig -> X -> Map Sig (List X) -> Map Sig (List X)}
snocOrInsert sig x mnil = mentry sig [x] mnil
snocOrInsert sig x (mentry sig' xs rest) =
    if (eqSig sig sig')
      { mentry sig' (snoc xs x) rest }
      { mentry sig' xs (snocOrInsert sig x rest) }

-- equality between signals
eqSig : {Sig -> Sig -> Bool}
eqSig (opIntSig _) (opIntSig _) = true
eqSig (opStrSig _) (opStrSig _) = true
eqSig _ _ = false

peek : {Sig -> Map Sig (List X) -> Maybe X}
peek _ mnil = nothing
peek sig (mentry sig' xs rest) =
    if (eqSig sig sig')
       { case (xs)
         { nil -> nothing
         | (cb :: cbs) -> just cb }}
       { peek sig rest }

tail : {List X -> List X}
tail nil = nil
tail (x::xs) = xs

pop : {Sig -> Map Sig (List X) -> Map Sig (List X)}
pop _ mnil = mnil
pop sig (mentry sig' xs rest) =
    if (eqSig sig sig')
       { mentry sig' (tail xs) rest}
       { mentry sig' xs (pop sig rest) }
---------------- end helpers

-- Promise interface
interface Promise =
          promise R : Prom R [Promise, RefState] -> Pid R [Promise, RefState]
        | signal : Sig -> Unit
        | await R : Pid R [Promise, RefState] -> R

interface Tick = tick : Unit

data Prom R = opIntCb {Int -> R} | opStrCb {String -> R}

data Sig = opIntSig Int | opStrSig String

----------------
-- Pid stuff

data PromiseStatus X  = empty | done X | addRes {X -> Unit}

data Pid X = pid (Ref (PromiseStatus X))

readPid : {Pid X [E|] -> [RefState] PromiseStatus X [E|]}
readPid (pid cell) = read cell

writePid : {Pid X [E|] -> PromiseStatus X [E|] -> [RefState] Unit}
writePid (pid cell) x = write cell x

readPid2 : {Pid X -> [RefState] (Maybe X)}
readPid2 (pid cell) = case (read cell)
                        { (done x) -> just x
                        | _ -> nothing }

------------
-- Thread code

client : {[Promise [Console], Console]Unit}
client! = print "Starting!\n";
          let res = promise (opIntCb {x -> print "running "; ouint (x + 10); print " thanks!\n"; unit} ) in
          await res;
          let res3 = promise (opIntCb {x -> print "running "; ouint (x + 10); print " thanks!\n"; unit} ) in
          let res2 = promise (opStrCb {x -> print "stringing  "; print x; print " thanks!\n"; unit} ) in
          await res2;
          print "Finished!\n";
          unit

server : {Int -> [Promise, Console, Tick] Unit}
server x = sleep 400000; tick!; signal (opIntSig x);
           sleep 400000; tick!; signal (opIntSig (x + 12));
           sleep 400000; tick!; signal (opStrSig ("yes"));
           unit

----------------
-- Handler prep

-- Given a pid and a callback, rewrites the callback such that it writes the
-- result to the cell and returns unit, whilst still performing effects as before.
-- Adds RefState to the ambient in the promise.
to_write : {Pid R [E | RefState] -> {S -> [E | RefState] R} -> {S -> [E | RefState] Unit}}
to_write (pid cell) cb = {x -> case (read cell)
                            { empty -> (write cell (done (cb x)))
                            | (addRes resumption) -> resumption (cb x) }}

-- -- Converts a function of Int -> Unit to one of Sig -> unit.
prep_int : {{Int -> [E|] Unit} -> {Sig -> [E|] Unit}}
prep_int cb = {s -> case (s)
                    { (opIntSig x) -> cb x
                    | _ -> unit }}

-- as above, for strings.
prep_str : {{String -> [E|] Unit} -> {Sig -> [E|] Unit}}
prep_str cb = {st -> case (st)
                     { (opStrSig st) -> cb st
                     | _ -> unit}}

----------------
-- Handlers

hdl : {Map Sig (List {Sig -> [Promise [Console], Console, RefState]Unit})  -- Promise storer
    -> <Promise [Console]> Unit      -- client
    -> <Promise, Tick> Unit                    -- server
    -> [Console, RefState] Unit}

-- Installing promises
-- cbMod is the original callback, modified to make its input and return types generic.
hdl cbs <promise (opIntCb cb) -> client> <server> =
    let cell = pid (new empty) in
    -- look at how they massacred my boy!
    let cbMod = prep_int (to_write cell cb) in
    hdl (snocOrInsert (opIntSig 0) cbMod cbs) (client cell) server!

-- -- same for strings
hdl cbs <promise (opStrCb cb) -> client> <server> =
    let cell = pid (new empty) in
    let cbMod = prep_str (to_write cell cb) in
    hdl (snocOrInsert (opStrSig "") cbMod cbs) (client cell) server!


-- Processing incoming signals without blocked computation.
hdl cbs <client> <signal sig -> server> =
    -- Look to see if there's any promises of this type waiting.
    case (peek sig cbs)
      -- if not, do nothing and return.
      { nothing -> hdl cbs client! (server unit)
      -- if there is, run it on the client's side and remove it.
      | (just cb) -> hdl (pop sig cbs) (cb sig; client!) (server unit)}
      -- | (just cb) -> print "\nHere!\n"; hdl (pop sig cbs) (print "calling";  client!) (server unit)}

-- Blocking
hdl cbs <await cell -> client> <server> =
    -- Let's pop this baby open
    case (readPid cell)
      -- If we already have a returned value, we just invoke the resumption with this.
      { (done x) -> hdl cbs (client x) server!
      -- If we still don't have a value, we need to add to the end of the callback with the
      -- resumption.
      -- So we write into the cell with 'addRes'.
      | empty -> writePid cell (addRes client);
                 hdl cbs unit server!;
                 unit}

hdl cbs <client> <tick -> server> =
    hdl cbs client! (server unit)

hdl _ unit _ = unit
hdl _ _ unit = unit

main : {[Console, RefState] Unit}
main! = hdl mnil (<RefState>(client!)) (<RefState>(server 10))
