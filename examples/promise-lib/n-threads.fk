include std

-- Here we need to take multiple promises, store them, and handle
-- We store the promises in a list.

data OpInt = opInt

data OpStr = opStr

-- These are the actual messages as invoked in the code.
interface Promise N S R =
            promise : N -> {S -> [Console] R} -> Unit
          | signal : N -> S -> Unit
          -- | await : R

-- These are the forwarded messages. They are different as we want to change the
-- resumption type later.
interface PromiseFwd N S R =
            promiseFwd : N -> {S -> [Console] R} -> Unit
          | signal : N -> S -> Unit

snoc : {List X -> X -> List X}
snoc nil x = [x]
snoc (y :: ys) x = y :: (snoc ys x)

client : {[Promise OpInt Int Unit]Unit}
client! = (promise opInt {x -> print "running "; ouint (x + 20); print " thanks!\n"})

server : {Int ->
            [Promise OpInt Int Unit] Unit}
server x = signal opInt 24 --; sleep 500000

-- Executes a list of callbacks by just chaining them.
-- Sadly can't be polymorphic in R
signalAll : {List {S -> [E|]Unit} -> S -> [E|]Unit}
signalAll [] _ = unit
signalAll (cb :: cbs) arg = cb arg ; signalAll cbs arg

-- Top-level handler for promises, etc
hdlTop : {List {Int -> [Console]Unit}
       -> <Promise OpInt Int Unit> Unit
       -> [Console]Unit}

hdlTop icbs <promise opInt cb -> k> =
       hdlTop (snoc icbs cb) (k unit)

hdlTop cbs <signal opInt n -> k> =
       print "Signalling\n";
       signalAll cbs n;
       hdlTop nil (k unit)

hdlTop _ unit =
       print "Hdltop finished\n"

hdlPass : {<Promise OpInt Int Unit>Unit
        -> <Promise OpInt Int Unit>Unit
        -> [Promise OpInt Int Unit, Console]Unit}

hdlPass <promise t cb -> k> <other> =
        promise t cb;
        hdlPass (k unit) other!

hdlPass <other> <promise t cb -> k> =
        promise t cb;
        hdlPass other! (k unit)

hdlPass <signal t arg -> k> <other> =
        signal t arg;
        hdlPass (k unit) other!

hdlPass <other> <signal t arg -> k> =
        signal t arg;
        hdlPass other! (k unit)

hdlPass _ unit = unit
hdlPass unit _ = unit

inter : {[Console, Promise OpInt Int Unit] Unit}
inter! = (hdlPass (<Promise, Console>(client!)) (<Promise, Console>(server 10)))

main : {[Console]Unit}
main! = hdlTop [] ((inter!))
