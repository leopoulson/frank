include std


-- Recursive type is required.
interface Promise N S R =
            promise : N -> {S -> [Console] R} -> Unit
          | signal  : N -> S -> Unit


-- Empty datatype used as a type-level string
data OpInt = opInt

data OpStr = opStr

data OpBool = opBool

server : {Int ->
            [Console,
             -- Promise OpBool Bool Unit,
             Promise OpStr String Unit,
             Promise OpInt Int Unit
             ] Unit}
server x =
            signal opInt 24
            ;
            <Promise> (signal opStr "yes")
            -- ;
            -- <Promise> (signal opBool true)

-- Executes a list of callbacks by just chaining them.
signalAll : {List {Int -> [E|]Unit} -> Int -> [E|]Unit}
signalAll [] _ = unit
signalAll (cb :: cbs) arg = cb arg ; signalAll cbs arg

hdlProm : {<
            -- Promise OpBool Bool Unit,
            Promise OpStr String Unit,
            Promise OpInt Int Unit
            > Unit -- server sending signals.
         -> [Console]Unit}

-- Installing promise
-- And this catches int?
-- hdlProm <signal.0 _ n -> server> =
--         print "int signal\n";
--         hdlProm (server unit)

-- hdlProm <signal.1 _ n -> server> =
--         print "str signal\n";
--         hdlProm (server unit)

hdlProm unit = print "\nserver exits\n"

main : {[Console]Unit}
main! = (hdlProm (server 0))
