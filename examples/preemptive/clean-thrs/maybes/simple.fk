include std

include threads_lib

---------------------
-- Scheduling

interface Yield = yield : Unit

-- -- ScheduleT schedules threads, but uses the threads structure for this.
scheduleT : {<Yield> Unit -> Int -> Ref (Threads [Console, RefState, Yield]) -> [Console, RefState]Unit}
scheduleT <yield -> k> cur thrs =
    -- Find which thread id is the next one to be ran.
    let readthrs = read thrs in
    let next = <Console, RefState> (nextId cur (keys readthrs)) in

    -- Look up this new thunk.
    let newThk = <Console, RefState>(fromMaybe (lookupThk next (readthrs))) in
    -- Thunk the continuation
    -- Write this in the corresponding place in the threads structure
    let newThrs = <Console, RefState>(writeThk cur {k unit} readthrs) in
    write thrs newThrs;

    scheduleT newThk! next thrs;
    unit

-- If the thread ends, just force a yield.
scheduleT unit cur thrs = scheduleT yield! cur thrs


-- Finds the next highest ID in threads.
-- If there isn't one higher, i.e. the current is the max, finds the lowest.
nextId : {Int -> List Int -> Int}
nextId cur xs =
   let lgt = leastGT cur 100 xs in
   if (lgt == 100) -- i.e. cur is max
       { lowest 100 xs }
       { lgt }


----------------------------
-- Promise structures.

interface Promise  =
          promise R : Prom R [Promise, RefState, Yield] -> Pid R [Promise, RefState, Yield]
        | signal : Sig -> Unit
        | await R : Pid R [Promise, RefState, Yield]-> R

-- Any effects will be performed in the returned comp.
-- Any guard conditions should NOT have effects in.
data Prom R [E] = prom {Sig -> Maybe {[E|]R}}

data Sig = printSig String | otherSig

----------------------------
-- Pids

data Pid X = pid (Ref (PromiseStatus X))

data PromiseStatus X = empty | done X | addRes {X -> Unit}

readPid : {Pid X [E|] -> [RefState] PromiseStatus X [E|]}
readPid (pid cell) = read cell

writePid : {Pid X [E|] -> PromiseStatus X [E|] -> [RefState] Unit}
writePid (pid cell) x = write cell x

----------------------------
-- Threads

printer : {[Promise[Console], Yield, Console] Unit}
printer! = print "Printer starting\n";
           promise (prom { (printSig x) -> just {print "\n*- "; print x ; print "\n"}
                         | _ -> nothing});
           unit


sender : {[Promise[Console], Yield, Console]Unit}
sender! = print "Sender starting\n";
          signal otherSig;
          signal (printSig "Hey!");
          unit

catter : {[Console, Yield] Unit}
catter! = print "Beppy\n";
          sleep 200000;
          yield!;
          catter!
         

-- Utility for controller; breaks down a big sleeping chunk and yields inbetween.
sleepAndYield : Int -> [Console, Yield]Unit
sleepAndYield x = if (x < 0)
              { unit }
              { sleep 100000; yield!; sleepAndYield (x - 100000) }


----------------------------
-- Callback utilities

to_write : Pid R [E| RefState]-> {S -> [E| RefState]R} -> {S -> [E| RefState] Unit}
to_write (pid cell) cb = {x -> case (read cell)
                             { empty -> write cell (done (cb x))
                             | (addRes resumption) -> resumption (cb x)}}


to_writeM : Pid R [E| RefState]
         -> {S -> [E| RefState] (Maybe {[E|RefState] R})}
         -> {S -> [E| RefState] (Maybe {[E|RefState] Unit})}
to_writeM (pid cell) cb =
    {x -> case (read cell)
         { empty -> case (cb x)
             { (just susp) -> just {write cell (done susp!)}
             | nothing -> nothing}
         | (addRes resumption) -> case (cb x)
             { (just susp) -> just {resumption (susp!)}
             | nothing -> nothing}}}
           --resumption (cb x)}}

to_writeM2 : Pid R [E|RefState]
          -> {S -> (Maybe {[E|RefState] R})}
          -> {S -> (Maybe {[E|RefState] Unit})}
to_writeM2 (pid cell) cb =
    {x -> case (cb x)
         { nothing -> nothing
         | (just susp) ->
             just {case (read cell)
                      { empty -> write cell (done susp!)
                      | (addRes resumption) -> resumption susp!}} }}


print_yield : {String -> [Console, Yield]Unit}
print_yield st = print st; print "\n";
                 sleep 250000;
                 yield!;
                 print_yield st


----------------------------
----- Handling Promises
----------------------------

hdl : {Int -> Ref (Threads [Console, Yield, RefState])
    -> <Promise[Console]> Unit
    -> [Yield, Console, RefState] Unit}

hdl thId thrs <promise (prom cb) -> k> =
    -- Create new pid cell
    let cell = pid (new empty) in
    -- Process callback to convert to general form
    let cbMod = <RefState, Yield>(to_writeM2 cell cb) in
    let cbMod = {x -> <Console> (cbMod x)} in

    -- Handle callback alongside the rest of the computation.
    let cbMaybe = {sig rest -> case ((cbMod sig)) { _ -> just {unit} }} in
    -- let cbMaybe = {sig rest -> (case ((cbMod sig))
                                   -- { nothing -> nothing
                                   -- | (just susp) -> just { print "T"; (hdl thId thrs (susp!; <Promise> rest!)) } })} in
                                   -- | (just susp) -> just {unit} })} in
    -- let cb3 = {sig rest -> just { hdl thId thrs (cbMod sig; <Promise> rest!)}} in



    let readthrs = read thrs in
    let queued = <Console, RefState, Yield>(addCb thId (cbMaybe) readthrs) in

--     -- Write the resumption to the cell and resume.
--     let res = {(hdl thId thrs (k cell))} in
--     write thrs (<Console, Yield, RefState>(writeThk thId res queued));
--     res!
    unit

-- -- So in this case, we want to go to each _thread_ and run the installed callbacks.
-- hdl thId thrs <signal sig -> thr> =
--     let readthrs = read thrs in
--     print "running threads";
--     let newThrs = <Console, Yield, RefState>(runThreads sig (readthrs)) in
--     print "done running";

--     let res = {hdl thId thrs (thr unit)} in
--     write thrs (<Console, Yield, RefState>(writeThk thId res newThrs));
--     res!

-- hdl thId thrs <await cell -> thr> =
--     case (readPid cell)
--          { (done x) ->
--                  let readthrs = read thrs in
--                  let res = {hdl thId thrs (thr x)} in
--                  write thrs (<Console, RefState, Yield>(writeThk thId res readthrs));
--                  res!
--          -- thr2 has Fork in ambient, but addRes won't allow that.
--          | empty -> writePid cell (addRes thr);
--                  let readthrs = read thrs in
--                  let res = {hdl thId thrs unit} in
--                  write thrs (<Console, RefState, Yield>(writeThk thId res readthrs));
--                  res!}

-- hdl thId thrs unit = unit

-------------------------------------
-- Running

-- thr1 : {Ref (Threads [Console, Yield, RefState]) -> {[Console, Yield, RefState] Unit}}
-- thr1 thrs = {hdl 0 thrs (<RefState> printer!) }

-- thr2 : {Ref (Threads [Console, Yield, RefState]) -> {[Console, Yield, RefState] Unit}}
-- thr2 thrs = {hdl 1 thrs (<RefState> sender!) }

-- -- All of these RefState adaptors are necessary, unfortunately.
-- makeThreads : {[RefState] Ref (Threads [Console, Yield, RefState])}
-- makeThreads! =
--     let thrs = new tnil in
--     write thrs (tentry 0 (<RefState> (thr1 thrs)) (tq [])
--                (tentry 1 (<RefState> (thr2 thrs)) (tq []) tnil));
--     thrs


-- run : {Ref (Threads [Console, Yield, RefState]) -> [Console, RefState]Unit}
-- run thrs =
--     let readthrs = <Console>(read thrs) in
--     let runner = <RefState, Console>(lookupThk 0 readthrs) in
--     case runner
--         { nothing -> unit
--         | (just runner) -> (scheduleT (runner!) 0 thrs) };
--     unit

-- hdled : {[Console, RefState]Unit}
-- hdled! =
--     let thrs = <Console> makeThreads! in
--     run thrs


-- main : {[Console, RefState] Unit}
-- main! = hdled!
