include std

include callbacks

-- Yielding needed for pre-emption to work.
interface Yield = yield : Unit

----------------------------
-- Promise structures.

interface Promise =
          promise R : Prom R [Promise, RefState, Await] -> Pid R [Promise, RefState, Await]
        | signal : Sig -> Unit

interface Await =
          await R : Pid R [Promise, RefState, Await] -> R

data Prom R [E] = goCb {Unit -> [E|] R}
                | stopCb {Unit -> [E|] R}

-- data Callbacks [E] = callbacks (Map Sig (List (Pair Int {Sig -> [E|]Unit})))

data Sig = goSig Unit | stopSig Unit

eqSig : {Sig -> Sig -> Bool}
eqSig (goSig _) (goSig _) = true
eqSig (stopSig _) (stopSig _) = true
eqSig _ _ = false


----------------------------
-- Pids

data Pid X = pid (Ref (PromiseStatus X))

data PromiseStatus X = empty | done X | addRes {X -> Unit}

readPid : {Pid X [E|] -> [RefState] PromiseStatus X [E|]}
readPid (pid cell) = read cell

writePid : {Pid X [E|] -> PromiseStatus X [E|] -> [RefState] Unit}
writePid (pid cell) x = write cell x

----------------------------
-- Callback utilities

to_write : Pid R [E| RefState]-> {S -> [E| RefState]R} -> {S -> [E| RefState] Unit}
to_write (pid cell) cb = {x -> case (read cell)
                             { empty -> write cell (done (cb x))
                             | (addRes resumption) -> resumption (cb x)}}

prepStop : {{Unit -> [E|] Unit} -> {Sig -> [E|] Unit}}
prepStop cb = {s -> case (s)
                   { (stopSig x) -> cb x
                   | _ -> unit}}

prepGo : {{Unit -> [E|] Unit} -> {Sig -> [E|] Unit}}
prepGo cb = {s -> case (s)
                   { (goSig x) -> cb x
                   | _ -> unit}}

apply : {Int -> Int -> {[E|]Unit} -> {[E|]R} -> {[E|]R}}
apply cbId threadId callback thread =
    if (cbId == threadId)
     {{callback!; thread!}}
     {thread}

----------------------------
-- Threads

counter : {Int -> [Console, Yield]Unit}
counter x = ouint x; print " ";
            sleep 200000;
            yield!;
            counter (x + 1)

-- Install an interrupt handler for stopping.
waitForStop : {[Console, Promise[Console], Await[Console], RefState]Unit}
waitForStop! =
    promise (stopCb { _ ->
                       -- When we receive stop, we stop; so we install go and
                       -- block on it.
                       let goPromise = promise (goCb {_ -> unit}) in
                       await goPromise;
                       -- Once go has been sent, we allow the thread to continue
                       -- computing and reinstall the stop waiter.
                       waitForStop!})
    ; unit

sleepAndYield : Int -> [Console, Yield]Unit
sleepAndYield x = if (x < 0)
              { unit }
              { sleep 100000; yield!; sleepAndYield (x - 100000) }

thread1 : {[Promise[Console], Await [Console], Console, RefState, Yield] Unit}
thread1! = print "starting"; <Yield>(waitForStop!); counter 0

controller : {[Promise [Console], Console, RefState, Yield] Unit}
controller! = print "\n*- Stop\n";
              signal (stopSig unit);
              print "sleeping\n";
              sleepAndYield 400000;
              print "\n*- Go\n"; signal (goSig unit);
              sleepAndYield 400000;
              controller!

----------------------------
-- Handler

-- hdlSgl : {Callbacks [K| Promise [K|], RefState]
--     -> <Promise[K|]> Unit -- thread
--     -> [K| RefState] Unit}

hdlSgl : {Callbacks [Console, Promise [Console], Await[Console], RefState]
    -> <Promise[Console], Await[Console]> Unit -- thread
    -> [Console, RefState] Unit}

----- Installing Promises
hdlSgl cbs <promise (stopCb cb) -> th1> =
    print "stopping\n";
    -- Create new pid cell
    let cell = pid (new empty) in
    -- Process callback to convert to correct form
    let cbMod = (prepStop (to_write cell cb)) in
    -- Add to list and resume.
    hdlSgl (snocOrInsert (stopSig unit) (pair 0 cbMod) cbs) (th1 cell)

hdlSgl cbs <promise (goCb cb) -> th1> =
    let cell = pid (new empty) in
    let cbMod = prepGo (to_write cell cb) in
    hdlSgl (snocOrInsert (goSig unit) (pair 0 cbMod) cbs) (th1 cell)

----- Executing promises based on signals.
hdlSgl cbs <signal sig -> th1> =
    print "in signal\n";
    -- Look to see if there's any matching promises waiting.
    case (peek sig cbs)
    -- If there isn't, do nothing and carry on.
      { nothing -> hdlSgl cbs (th1 unit)
      | (just (pair id cb)) -> print "found\n";
                               hdlSgl (pop sig cbs)
                               ((cb sig); (th1 unit))}

hdlSgl cbs <await cell -> client> =
    case (readPid cell)
         { (done x) -> hdlSgl cbs (client x)
         | empty -> writePid cell (addRes client);
                    hdlSgl cbs unit}

hdlSgl _ unit = unit



-- We label promise in the type, but never actually handle any promise commands.
-- We just let these pass up to the higher one.
hdlAwait : {<Await> Unit -> [RefState]Unit}

hdlAwait <await cell -> thread> =
    case (readPid cell)
         { (done x) -> hdlAwait (thread x)
         -- Applyign the adaptor to the thread, when executed.
         | empty    -> writePid cell (addRes {x -> <Promise>(thread x)});
                       unit }

hdlAwait unit = unit


betterControl : {<Yield> Unit -> <Yield> Unit -> Unit}
-- betterControl <yield -> m> <yield -> n> = betterControl (m unit) (n unit)
betterControl <yield -> m> <n> = betterControl n! (m unit)
betterControl <m> <yield -> n> = betterControl (n unit) m!

betterControl unit <m> = stupidYield m!
betterControl <m> unit = stupidYield m!

-- If we run stupidYield on the composition of the two, we never get anywhere; the two never let the other run.
stupidYield : {<Yield>Unit -> Unit}
stupidYield <yield -> k> = stupidYield (k unit)
stupidYield unit = unit

th : {[Promise[Console], Await[Console], RefState, Console, Yield] Unit}
th! = thread1!

one : {[Promise[Console], Console, RefState, Yield] Unit}
one! = hdlAwait (th1!)

-- between : {[Promise[Console], Console, RefState] Unit}
-- between! = betterControl (<Console>(hdlAwait (thread1!))) unit

-- main : {[Console, RefState]Unit}
-- main! = hdlSgl cbnil (betterControl (hdlAwait(thread1!)) (<Await>(controller!)))
