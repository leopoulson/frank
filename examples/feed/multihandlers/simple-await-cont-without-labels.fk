include std

-- Let's have two threads. The client requests the server for data, and installs
-- a promise that it acts on when the server returns. The server can do some
-- other things, but will eventually send the request.

interface Whatever = whatever : Unit

interface Response S = response : S -> Unit

-- interface Request = request : Unit

interface PromiseResponse S R  =
          -- The pollution in the return type of the callback is very annoying.
          promiseResponse : {S -> R} -> Unit

interface AwaitResponse R = awaitResponse : R

client : {[PromiseResponse Int Int, AwaitResponse Int, Console]Unit}
client! = promiseResponse {x -> x};
           print "response is ";
           ouint awaitResponse!;
           print ", the end\n"

server : {[Response Int, Whatever, Console] Unit}
server! = whatever!; sleep 500000; whatever!; sleep 500000; response 10

schedule : {Maybe {Int -> Int} -- Response Callback
         -> Maybe {Int -> [PromiseResponse Int Int , AwaitResponse Int, Console] Unit} -- The rest of Client, which gets awaited
         -> <PromiseResponse Int Int , AwaitResponse Int> Unit
         -> <Response Int, Whatever> Unit
         -> [Console]Unit}

schedule _ res <promiseResponse cb -> client> <server> =
         schedule (just cb) res (client unit) server!

-- When response comes in, we perform the callback as well as restarting the
-- thread that was suspended.
schedule (just cb) (just res) unit <response x -> server> =
         schedule nothing nothing (let result = <PromiseResponse, AwaitResponse, Console> (cb x) in  (res result)) (server unit)

schedule cb res <client> <whatever -> server> =
         schedule cb res client! (print "whatever\n"; server unit)

-- When we await, we take the continuation of the effect and store it.
-- We then wait for the corresponding signal to come in.
schedule cb _ <awaitResponse -> client> <server> =
         schedule cb (just client) unit server!

schedule _ _ _ unit = print "\nserver exits\n"

main : {[Console]Unit}
main! = schedule nothing nothing client! server!
