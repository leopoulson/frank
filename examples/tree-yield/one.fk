--! YT=10

include std

sleepGranularity : {Int}
sleepGranularity! = 100000

sleepMany : {Int -> [Console, Yield] Unit}
sleepMany x = if (x > 0) {sleep (sleepGranularity!);
                          sleepMany (x - sleepGranularity!)}
                         { unit }

-- sleepMany : {Int -> [Console, Yield] Unit}
-- sleepMany x = sleep x -- ; yield!

thread : {String -> [Console, Yield] Unit}
thread st = print st; sleepMany 200000; thread st

pass : {X -> X}
pass x = x

whatever : {Unit -> Unit -> Unit}
whatever x y = x; y

schedj : {<Yield> Unit -> <Yield> Unit -> <Yield>Unit -> Unit}
schedj unit unit unit = unit

schedj2 : {<Yield> Unit -> <Yield> Unit -> Unit}
schedj2 unit unit = unit

schedj2In : {<Yield> Unit -> <Yield> Unit -> Unit}
schedj2In <yield -> inA> <yield -> inB> = schedj2In (inA unit) (inB unit)
schedj2In <yield -> inA> <inB> = schedj2In (inA unit) inB!
schedj2In <inA> <yield -> inB> = schedj2In inA! (inB unit)
schedj2In unit unit = unit

schedj2Out : {<Yield> Unit -> <Yield> Unit -> Unit}
schedj2Out <yield -> inA> <yield -> inB> = schedj2Out (inA unit) (inB unit)
schedj2Out <yield -> inA> <inB> = schedj2Out (inA unit) inB!
schedj2Out <inA> <yield -> inB> = schedj2Out inA! (inB unit)
schedj2Out unit unit = unit

tower : {[Console] Unit}
tower! = schedj2Out (schedj2In (thread "A ") (thread "B ")) (thread "C ")
-- tower! = schedj2 (schedj2 (thread "A ") (thread "B ")) (thread "C ")

main : {[Console] Unit}
main! = tower!
