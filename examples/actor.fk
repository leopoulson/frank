include prelude

------------------------------------------------------------------------------
-- Interfaces for actors, cooperative concurrency, and queues
------------------------------------------------------------------------------

interface Actor X = self    : Pid X
                  | spawn Y : {[Actor Y]Unit} -> Pid Y
                  | recv    : X
                  | send Y  : Y -> Pid Y -> Unit

interface Co = fork  : {[Co]Unit} -> Unit
             | yield : Unit

interface Queue S = enqueue : S -> Unit
                  | dequeue : Maybe S

------------------------------------------------------------------------------
-- FIFO queue implementation using a zipper
------------------------------------------------------------------------------

data ZipQ S = zipq (List S) (List S)

emptyZipQ : {ZipQ S}
emptyZipQ! = zipq [] []

-- FIFO queue implementation using a zipper
-- (returns the remaining queue alongside the final value)
runFifo : {ZipQ S -> <Queue S>X -> Pair X (ZipQ S)}
runFifo (zipq front back)        <enqueue x -> k> =
  runFifo (zipq front (x :: back)) (k unit)
runFifo (zipq [] [])             <dequeue -> k> =
  runFifo emptyZipQ! (k nothing)
runFifo (zipq [] back)           <dequeue -> k> =
  runFifo (zipq (rev back) []) (k dequeue!)
runFifo (zipq (x :: front) back) <dequeue -> k> =
  runFifo (zipq front back) (k (just x))
runFifo queue                    x =
  pair x queue

------------------------------------------------------------------------------
-- Concurrent scheduler implementation
------------------------------------------------------------------------------

data Proc = proc {[Queue Proc]Unit}

enqProc : {[Queue Proc]Unit} -> [Queue Proc]Unit
enqProc p = enqueue (proc p)

wakeProc : {[Queue Proc]Unit}
wakeProc! = case dequeue! { (just (proc x)) -> x!
                          | nothing         -> unit }

-- lazily run forked processes
runBF : {<Co>Unit -> [Queue Proc]Unit}
runBF <yield -> k>  = enqProc {runBF (k unit)};
                      wakeProc!
runBF <fork p -> k> = enqProc {runBF (<Queue> p!)};
                      runBF (k unit)
runBF unit          = wakeProc!

------------------------------------------------------------------------------
-- Actor implementation
------------------------------------------------------------------------------

data Pid X = pid (Ref (ZipQ X))

runActor : {Pid X -> <Actor X>Unit ->
             [Co [RefState], RefState]Unit}

runActor mine    <self -> k> = runActor mine (k mine)

runActor mine    <spawn you -> k> =
  let yours = pid (new (emptyZipQ!)) in
  fork {runActor yours (<RefState, Co> you!)};
  runActor mine (k yours)

runActor (pid m) <recv -> k> =
  case (runFifo (read m) dequeue!)
    { (pair nothing _)  -> yield!;
                           runActor (pid m) (k recv!)
    | (pair (just x) q) -> write m q;
                           runActor (pid m) (k x) }

runActor mine    <send x (pid m) -> k> =
  case (runFifo (read m) (enqueue x))
        { (pair _ q) -> write m q;
                        runActor mine (k unit) }

runActor mine    unit = unit

act : {<Actor X>Unit -> [RefState]Unit}
act <m> = case (runFifo emptyZipQ!
               (runBF (<Queue>
               (runActor (pid (new (emptyZipQ!)))
                         (<Co> m!)))))
               { (pair x _) -> x }

--------------------------------------------------------------------------------
-- Example actors
--------------------------------------------------------------------------------

spawnMany : {Pid String -> Int ->
               [Actor String [Console], Console]Unit}
spawnMany p 0 = send "do be do be do" p
spawnMany p n = spawnMany (spawn {let x = recv! in
                                  print ".";
                                  send x p}) (n-1)

chain : {[Actor String [Console], Console]Unit}
chain! = spawnMany self! 640; let msg = recv! in
         print "\n"; print msg; print "\n"


spawnMany' : {Pid String -> Ref Int ->
               [Actor String [Console, RefState], Console, RefState]Unit}
spawnMany' p r = let n = read r in
                 write r (n-1);
                 case n { 0 -> send "do be do be do" p
                        | _ -> spawnMany' (spawn {let x = recv! in
                                                  print ".";
                                                  send x p}) r }

chain' : {[Actor String [Console, RefState], Console, RefState]Unit}
chain'! = spawnMany' self! (new 640); let msg = recv! in
          print "\n"; print msg; print "\n"

-- pass a message along a chain of actors
ex1 : {[Console, RefState]Unit}
ex1! = act (<RefState> chain!)

-- stateful actors
ex2 : {[Console, RefState]Unit}
ex2! = <RefState(s x -> s x x)> (act (<RefState> chain'!))

------------------------------------------------------------------------------
-- Main
------------------------------------------------------------------------------

main : {[Console, RefState]Unit}
main! = ex1!
